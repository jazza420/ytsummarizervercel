/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/NlRQUEetprC
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Arimo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Pagination, PaginationContent, PaginationItem, PaginationPrevious, PaginationLink, PaginationNext } from "@/components/ui/pagination"
import React, { useState, useEffect, useRef  } from 'react';
import { Input } from "@/components/ui/input"
import {  WandSparkles } from 'lucide-react'
import { Textarea } from "@/components/ui/textarea"


function getMinutesOld(date) {
  const now = new Date();
  const diffInMilliseconds = now - date; // difference in milliseconds
  const diffInMinutes = Math.floor(diffInMilliseconds / 1000 / 60); // convert to minutes
  return diffInMinutes;
}



const DownloadTextFile = ({text, title, label}) => {
  const handleDownload = () => {
    //const text = "This is a sample text file.";
    const blob = new Blob([text], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = title;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return <Button variant={"outline"}  onClick={handleDownload}>{label}</Button>;
};


export function ChapterList({chapterList, isPortrait, fullText, title}) {
  const [pageNo, setPageNo] = useState(1);
  const perPage = 1;
  const numPages = Math.ceil(chapterList.length/perPage);

  {
  //   const chapters = [];
  // chapterList.forEach((v, index) => {
  //   if(index < (pageNo-1)*perPage || index >= (pageNo)*perPage) return

  //   chapters.push(
  //     <TableRow onClick={()=>chooseChapter(v.id)} key={v.id} style={{cursor: "pointer"}} >
  //       <TableCell >
  //         <img
  //           src={v.thumb?v.thumb:"logo11.png"}
  //           alt="Thumbnail"
  //           width={64}
  //           height={64}
  //           className="rounded-md object-cover"
  //           style={{ aspectRatio: "80/80", objectFit: "cover" }}
  //         />
  //       </TableCell>
  //       {/* <TableCell>
  //         <div className="font-medium line-clamp-3">{v.title}</div>
  //       </TableCell> */}
  //       {!isPortrait&&<TableCell>
  //         {/* <div className="flex flex-row text-muted-foreground line-clamp-3 break-all">
  //           {"v.script"}
  //         </div> */}
  //         <div className="font-small line-clamp-5 break-all">{v.title}</div>
  //       </TableCell>}
  //       <TableCell>
  //       {/* {v.chapter?(<Badge variant="outline" className="text-green-300">Ready</Badge>)
  //       :(getMinutesOld(v.createdDate)<12?<Badge variant="outline" className="text-yellow-300">Generating</Badge>
  //       :<Badge variant="outline" className="text-red-400">Failed</Badge>)} */}
  //        {/* || getMinutesOld(v.createdDate)>10
  //       {v.status=="generating" ? <Badge variant="outline" className="text-yellow-300">Generating</Badge> : ((v.status=="failed") ? <Badge variant="outline" className="text-red-400">Failed</Badge> : <Badge variant="outline" className="text-green-300">Ready</Badge>)} */}

  //       {/* {(v.status=="ready"||v.status=="succeeded") ? <Badge variant="outline" className="text-green-300">Ready</Badge> : ((v.status=="generating"&&getMinutesOld(v.createdDate)<10) ? <Badge variant="outline" className="text-yellow-300">Generating</Badge> : <Badge variant="outline" className="text-red-400">Failed</Badge>) } */}

  //       </TableCell>
  //     </TableRow>
  //   )
  // });
  }

  const pageButtons = [];
  const s = isPortrait?5:25;
  const e = Math.floor(s/2);
  let j = 0;
  let f = pageNo-e-Math.max(0, (pageNo+e)-numPages)+(1-s%2)
  for(let i = (f>0?f:1); i <= numPages && j < s; i++) {
    j++;
    pageButtons.push(
      <PaginationItem>
        <PaginationLink style={{userSelect: "none",cursor: "pointer"}} isActive={i==pageNo} onClick={()=>setPageNo(i)}>{i}</PaginationLink>
      </PaginationItem>
    );
  }

  const nextPage = () => {
    if(pageNo<numPages) setPageNo(pageNo+1);
  }

  const prevPage = () => {
    if(pageNo>1) setPageNo(pageNo-1);
  }
  //style={{backgroundColor:"#181818"}}

  let chapter = chapterList[pageNo-1];


  return ( //container 
    <div className="flex flex-row w-full">
    <div className="w-full"> 
      {/* <div className="flex justify-between items-center mb-4">
        <h1 className="text-xl font-bold">My Audiobooks</h1>
      </div> */}
      {
      //  <div className="bg-background rounded-lg shadow-md overflow-hidden w-full flex flex-row">
      //   <Table className="w-full"> {/* Ensuring the table takes full width */}
      //     <TableHeader>
      //       <TableRow>
      //         <TableHead>Thumbnail</TableHead>
      //         {!isPortrait && <TableHead className="w-full">Title</TableHead>}
      //         <TableHead>Status</TableHead>
      //       </TableRow>
      //     </TableHeader>
      //     <TableBody>
      //       {chapters}
      //     </TableBody>
      //   </Table>
      // </div>


      }



      <div key={chapter.title} className="shadow rounded-lg p-4 border bg-background space-y-2">
        <div className="flex justify-between items-start mb-2">
          <Input
            type="text"
            value={chapter.title}
            // onChange={(e) => updateChapter(chapter.id, { title: e.target.value })}
            className="text-md font-medium border-none focus:ring-0 p-0"
            // placeholder={`Chapter ${index + 1}`}
          />
          {/* <button
            onClick={() => removeChapter(chapter.id)}
            className="hover:opacity-75 transition-opacity"
          >
            <Trash2 className="w-5 h-5" />
          </button> */}
        </div>

        <Textarea
          value={chapter.text}
          // onChange={(e) => updateChapter(chapter.id, { content: e.target.value })}
          rows={14}
          className="mt-1 block w-full rounded-md border shadow-sm focus:ring-2 focus:ring-offset-2 sm:text-sm"
        />
        <div className="flex items-center gap-2">
          {chapterList.length>1 &&<DownloadTextFile text={chapter.text} title={chapter.title} label={"Download Chapter Text"}/>}
          <DownloadTextFile text={fullText} title={title} label={"Download Full Text"}/>
          <Button variant={"outline"}>Edit</Button>
        </div>
      </div>
      

      {chapterList.length>1 &&
      <div className="flex justify-center mt-6">
        <Pagination>
          <PaginationContent>
            <PaginationItem>
              <PaginationPrevious onClick={prevPage} style={{userSelect: "none", cursor: "pointer"}}/>
            </PaginationItem>
            {pageButtons}
            <PaginationItem>
              <PaginationNext onClick={nextPage} style={{userSelect: "none", cursor: "pointer"}}/>
            </PaginationItem>
          </PaginationContent>
        </Pagination>
      </div>}
    </div>
  </div>
  )
}
