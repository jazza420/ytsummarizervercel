/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/NlRQUEetprC
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Arimo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Pagination, PaginationContent, PaginationItem, PaginationPrevious, PaginationLink, PaginationNext } from "@/components/ui/pagination"
import React, { useState, useEffect, useRef  } from 'react';

import {  WandSparkles } from 'lucide-react'



function getMinutesOld(date) {
  const now = new Date();
  const diffInMilliseconds = now - date; // difference in milliseconds
  const diffInMinutes = Math.floor(diffInMilliseconds / 1000 / 60); // convert to minutes
  return diffInMinutes;
}



export function VideoList({videoList, chooseVideo, isPortrait, setDashBoardState}) {
  const [pageNo, setPageNo] = useState(1);
  const perPage = 5;
  const numPages = Math.ceil(videoList.length/perPage);

  const videos = [];
  videoList.forEach((v, index) => {
    if(index < (pageNo-1)*perPage || index >= (pageNo)*perPage) return

    videos.push(
      <TableRow onClick={()=>chooseVideo(v.id)} key={v.id} style={{cursor: "pointer"}} >
        <TableCell >
          <img
            src={v.thumb?v.thumb:"logo11.png"}
            alt="Thumbnail"
            width={64}
            height={64}
            className="rounded-md object-cover"
            style={{ aspectRatio: "80/80", objectFit: "cover" }}
          />
        </TableCell>
        {/* <TableCell>
          <div className="font-medium line-clamp-3">{v.title}</div>
        </TableCell> */}
        {!isPortrait&&<TableCell>
          {/* <div className="flex flex-row text-muted-foreground line-clamp-3 break-all">
            {"v.script"}
          </div> */}
          <div className="font-small line-clamp-5 break-all">{v.title}</div>
        </TableCell>}
        <TableCell>
        {/* {v.video?(<Badge variant="outline" className="text-green-300">Ready</Badge>)
        :(getMinutesOld(v.createdDate)<12?<Badge variant="outline" className="text-yellow-300">Generating</Badge>
        :<Badge variant="outline" className="text-red-400">Failed</Badge>)} */}
         {/* || getMinutesOld(v.createdDate)>10
        {v.status=="generating" ? <Badge variant="outline" className="text-yellow-300">Generating</Badge> : ((v.status=="failed") ? <Badge variant="outline" className="text-red-400">Failed</Badge> : <Badge variant="outline" className="text-green-300">Ready</Badge>)} */}
        {/* {v.audioStatus=="generating" ? <Badge variant="outline" className="text-yellow-300">Generating Audio</Badge> : (v.status=="ready"||v.status=="succeeded") ? <Badge variant="outline" className="text-green-300">Ready</Badge> : ((v.status=="generating"&&getMinutesOld(v.createdDate)<10) ? <Badge variant="outline" className="text-yellow-300">Generating</Badge> : <Badge variant="outline" className="text-red-400">Failed</Badge>)} */}
        {(v.status=="ready"||v.status=="succeeded") ? <Badge variant="outline" className="text-green-300">Ready</Badge> : ((v.status=="generating"&&getMinutesOld(v.createdDate)<10) ? <Badge variant="outline" className="text-yellow-300">Generating</Badge> : <Badge variant="outline" className="text-red-400">Failed</Badge>) }

        </TableCell>
      </TableRow>
    )
  });

  const pageButtons = [];
  const s = isPortrait?3:5;
  const e = Math.floor(s/2);
  let j = 0;
  let f = pageNo-e-Math.max(0, (pageNo+e)-numPages)+(1-s%2)
  for(let i = (f>0?f:1); i <= numPages && j < s; i++) {
    j++;
    pageButtons.push(
      <PaginationItem>
        <PaginationLink style={{userSelect: "none",cursor: "pointer"}} isActive={i==pageNo} onClick={()=>setPageNo(i)}>{i}</PaginationLink>
      </PaginationItem>
    );
  }

  const nextPage = () => {
    if(pageNo<numPages) setPageNo(pageNo+1);
  }

  const prevPage = () => {
    if(pageNo>1) setPageNo(pageNo-1);
  }
  //style={{backgroundColor:"#181818"}}

  return ( //container 
    <div className="flex flex-row w-full py-4">
    <div className="w-full py-4"> 
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-xl font-bold">My Audiobooks</h1>
        <Button size="default" variant="secondary" onClick={()=>setDashBoardState("create")}>
          <WandSparkles className="h-4 w-4 mr-2" /> Generate New Audiobook
        </Button>
      </div>
      <div className="bg-background rounded-lg shadow-md overflow-hidden w-full flex flex-row">
        <Table className="w-full"> {/* Ensuring the table takes full width */}
          <TableHeader>
            <TableRow>
              <TableHead>Thumbnail</TableHead>
              {!isPortrait && <TableHead className="w-full">Title</TableHead>}
              <TableHead>Status</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {videos}
          </TableBody>
        </Table>
      </div>
      <div className="flex justify-center mt-6">
        <Pagination>
          <PaginationContent>
            <PaginationItem>
              <PaginationPrevious onClick={prevPage} style={{userSelect: "none", cursor: "pointer"}}/>
            </PaginationItem>
            {pageButtons}
            <PaginationItem>
              <PaginationNext onClick={nextPage} style={{userSelect: "none", cursor: "pointer"}}/>
            </PaginationItem>
          </PaginationContent>
        </Pagination>
      </div>
    </div>
  </div>
  )
}
